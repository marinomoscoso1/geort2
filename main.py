
import openai
import threading
import traceback
import re
from kivy.app import App
from kivy.core.window import Window
from kivy.uix.image import Image
from kivy.uix.scrollview import ScrollView
from kivy.uix.screenmanager import ScreenManager, Screen, FadeTransition
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.label import Label
from kivy.uix.progressbar import ProgressBar
from kivy.uix.button import Button
from kivy.graphics import Color, Rectangle
from kivy.clock import Clock

# Tu clave de OpenAI (reemplaza esto con tu propia clave)
my_api_key = 'sk-09nZyLEyvBrxx1RUggw-PIUg_dALuX1di_fHgl0r0dT3BlbkFJ5IhcJOD0OK17IxVyjD860cQCvwwaOX6lNG5l-MmLYA'

client= openai.OpenAI(api_key=my_api_key)
# Pantalla de Carga
class SplashScreen(Screen):
    def __init__(self, **kwargs):
        super(SplashScreen, self).__init__(**kwargs)
        self.build_ui()

    def build_ui(self):
        layout = BoxLayout(orientation='vertical')

        # Encabezado verde con texto
        header_layout = BoxLayout(size_hint=(1, 0.15))
        with header_layout.canvas.before:
            Color(0.0, 0.6, 0.0, 1.0)  # Verde
            self.header_rect = Rectangle(size=header_layout.size, pos=header_layout.pos)
        header_layout.bind(size=self._update_header_rect, pos=self._update_header_rect)

        header_label = Label(
            text='[color=#00008B]GEORT[/color] [color=#00CC00]BETA[/color]',
            markup=True,
            font_size='32sp',
            bold=True,
            halign='center',
            valign='middle',
        )
        header_layout.add_widget(header_label)

        # Comentario para la imagen (si tienes la imagen, quita las #)
        # gear_image_header = Image(
        #     source='gear_darkblue.png',
        #     size_hint=(None, None),
        #     size=(30, 30),
        #     allow_stretch=True,
        # )
        # header_layout.add_widget(gear_image_header)

        # Contenido principal con texto y barra de progreso
        content_layout = BoxLayout(orientation='vertical', padding=10, spacing=10, size_hint=(1, 0.7))

        cargando_label = Label(
            text='Cargando...',
            font_size='32sp',
            color=(1, 0.5, 0, 1),  # Naranja
            halign='center',
            valign='middle',
            size_hint=(1, 0.2)
        )
        cargando_label.bind(size=cargando_label.setter('text_size'))

        self.progress_bar = ProgressBar(max=100, value=0, size_hint=(1, 0.1))
        with self.progress_bar.canvas.before:
            Color(0.0, 0.6, 0.85, 1.0)  # Azul
            self.progress_rect = Rectangle(size=self.progress_bar.size, pos=self.progress_bar.pos)
        self.progress_bar.bind(size=self._update_progress_rect, pos=self._update_progress_rect)

        content_layout.add_widget(cargando_label)
        content_layout.add_widget(self.progress_bar)

        # Pie de página azul con texto
        footer_layout = BoxLayout(size_hint=(1, 0.15))
        with footer_layout.canvas.before:
            Color(0.0, 0.6, 0.85, 1.0)  # Azul
            self.footer_rect = Rectangle(size=footer_layout.size, pos=footer_layout.pos)
        footer_layout.bind(size=self._update_footer_rect, pos=self._update_footer_rect)

        footer_label = Label(
            text='Desarrollado por: [color=#00CC00]GEORT TEAM[/color]',
            markup=True,
            font_size='24sp',
            halign='center',
            valign='middle'
        )
        footer_layout.add_widget(footer_label)

        layout.add_widget(header_layout)
        layout.add_widget(content_layout)
        layout.add_widget(footer_layout)

        self.add_widget(layout)

        # Empezar a llenar la barra de progreso
        Clock.schedule_interval(self.update_progress_bar, 0.03)  # Completa en 3 segundos

    def _update_header_rect(self, instance, value):
        self.header_rect.pos = instance.pos
        self.header_rect.size = instance.size

    def _update_footer_rect(self, instance, value):
        self.footer_rect.pos = instance.pos
        self.footer_rect.size = instance.size

    def _update_progress_rect(self, instance, value):
        self.progress_rect.size = instance.size
        self.progress_rect.pos = instance.pos

    def update_progress_bar(self, dt):
        self.progress_bar.value += dt * 100 / 3  # Completa en 3 segundos
        if self.progress_bar.value >= 100:
            self.progress_bar.value = 100
            Clock.unschedule(self.update_progress_bar)
            # Cambiar a la pantalla de selección de temas
            self.manager.current = 'tema_screen'

# Pantalla de Selección de Temas
class TemaScreen(Screen):
    def __init__(self, **kwargs):
        super(TemaScreen, self).__init__(**kwargs)
        self.build_ui()

    def build_ui(self):
        layout = BoxLayout(orientation='vertical', padding=0, spacing=10)

        # Fondo blanco
        with self.canvas.before:
            Color(1, 1, 1, 1)  # Blanco
            self.rect = Rectangle(size=self.size, pos=self.pos)
        self.bind(size=self._update_rect, pos=self._update_rect)

        # Encabezado azul con texto
        header_layout = BoxLayout(size_hint=(1, 0.15), padding=(10, 10), spacing=10)
        with header_layout.canvas.before:
            Color(0.0, 0.6, 0.85, 1.0)  # Azul
            self.header_rect = Rectangle(size=header_layout.size, pos=header_layout.pos)
        header_layout.bind(size=self._update_header_rect, pos=self._update_header_rect)

        header_label = Label(
            text='[color=#00008B]GEORT[/color] [color=#00CC00]BETA[/color]',
            markup=True,  # Permitir etiquetas de formato
            font_size='32sp',
            bold=True,
            halign='center',
            valign='middle',
        )
        header_layout.add_widget(header_label)

        # gear_image_header = Image(
        #     source='gear_darkblue.png',
        #     size_hint=(None, None),
        #     size=(30, 30),
        #     allow_stretch=True,
        # )
        # header_layout.add_widget(gear_image_header)

        # Botones de temas usando GridLayout
        temas_layout = GridLayout(cols=1, spacing=15, padding=(20, 10), size_hint=(1, 0.75))

        # Lista de temas disponibles
        temas = ['La Independencia de Colombia', 'La Batalla de Boyacá', 'La Guerra de los Mil Días']

        for tema_texto in temas:
            button = Button(
                text=tema_texto,
                font_size='28sp',  # Tamaño de fuente grande
                background_normal='',  # Sin imagen de fondo
                background_color=(0.0, 0.8, 0.0, 1),  # Verde brillante
                color=(1, 1, 1, 1),  # Texto blanco
                size_hint=(1, 1),  # Ocupa todo el espacio
            )
            button.bind(on_press=lambda instance, tema=tema_texto: self.select_tema(tema))
            temas_layout.add_widget(button)

        # Pie de página verde con texto
        footer_layout = BoxLayout(size_hint=(1, 0.1), padding=(10, 10))
        with footer_layout.canvas.before:
            Color(0.0, 0.6, 0.0, 1)  # Verde fuerte
            self.footer_rect = Rectangle(size=footer_layout.size, pos=footer_layout.pos)
        footer_layout.bind(size=self._update_footer_rect, pos=self._update_footer_rect)

        # Texto del pie de página
        footer_label = Label(
            text='Desarrollado por: [color=#00CC00]GEORT TEAM[/color]',
            markup=True,
            font_size='24sp',
            halign='center',
            valign='middle'
        )
        footer_layout.add_widget(footer_label)

        layout.add_widget(header_layout)
        layout.add_widget(temas_layout)
        layout.add_widget(footer_layout)

        self.add_widget(layout)

    def _update_rect(self, instance, value):
        self.rect.pos = self.pos
        self.rect.size = self.size

    def _update_header_rect(self, instance, value):
        self.header_rect.pos = instance.pos
        self.header_rect.size = instance.size

    def _update_footer_rect(self, instance, value):
        self.footer_rect.pos = instance.pos
        self.footer_rect.size = instance.size

    def select_tema(self, tema):
        print(f"Seleccionado tema: {tema}")  # Imprimir en la consola
        # Mostrar pantalla de carga de preguntas
        self.manager.current = 'splash_screen'
        # Iniciar la generación de preguntas después de la carga
        Clock.schedule_once(lambda dt: self.manager.get_screen('pregunta_screen').start_question_generation(tema), 0.1)

# Pantalla de Preguntas
class PreguntaScreen(Screen):
    def __init__(self, **kwargs):
        super(PreguntaScreen, self).__init__(**kwargs)
        self.questions = []
        self.current_question_index = 0
        self.tema = ""
        self.correct_answers = 0
        self.is_generating = False  # Evitar múltiples generaciones
        self.build_ui()

    def build_ui(self):
        layout = BoxLayout(orientation='vertical', spacing=0)

        # Encabezado azul con texto
        self.header_layout = BoxLayout(size_hint=(1, 0.15), padding=(10, 10), spacing=10)
        with self.header_layout.canvas.before:
            Color(0.0, 0.6, 0.85, 1.0)  # Azul
            self.header_rect = Rectangle(size=self.header_layout.size, pos=self.header_layout.pos)
        self.header_layout.bind(size=self._update_header_rect, pos=self._update_header_rect)

        header_label = Label(
            text='[color=#00008B]GEORT[/color] [color=#00CC00]BETA[/color]',
            markup=True,
            font_size='32sp',
            bold=True,
            halign='center',
            valign='middle',
        )
        self.header_layout.add_widget(header_label)

        # Comentario para la imagen (si tienes la imagen, quita las #)
        # gear_image_header = Image(
        #     source='gear_darkblue.png',
        #     size_hint=(None, None),
        #     size=(30, 30),
        #     allow_stretch=True,
        # )
        # self.header_layout.add_widget(gear_image_header)

        # Contenido principal con número de pregunta, texto y opciones
        self.content_layout = BoxLayout(orientation='vertical', padding=(20, 10), spacing=10, size_hint=(1, 0.75))

        # Número de pregunta
        self.numero_pregunta = Label(
            text='Cargando pregunta...',
            font_size='24sp',
            halign='center',
            valign='middle',
            size_hint=(1, 0.1)
        )
        self.numero_pregunta.bind(size=self.numero_pregunta.setter('text_size'))
        self.content_layout.add_widget(self.numero_pregunta)

        # Cuadro azul oscuro para la pregunta
        self.question_box = ScrollView(size_hint=(1, None), size=(self.width, 200))
        with self.question_box.canvas.before:
            Color(0.0, 0.4, 0.6, 1.0)  # Azul oscuro
            self.question_rect = Rectangle(size=self.question_box.size, pos=self.question_box.pos)
        self.question_box.bind(size=self._update_question_rect, pos=self._update_question_rect)

        # Contenedor dentro del ScrollView con padding
        question_inner = BoxLayout(orientation='vertical', padding=10, size_hint_y=None)
        question_inner.bind(minimum_height=question_inner.setter('height'))

        self.question_label = Label(
            text='',
            halign='center',
            valign='middle',
            size_hint_y=None,
            color=(1, 1, 1, 1),
            font_size='26sp',
            text_size=(self.width - 60, None),  # Ajustar ancho para el texto
        )
        self.question_label.bind(texture_size=self.question_label.setter('size'))
        question_inner.add_widget(self.question_label)

        self.question_box.add_widget(question_inner)
        self.content_layout.add_widget(self.question_box)

        # Opciones de respuesta
        self.options_layout = GridLayout(cols=1, spacing=15, padding=(0, 10), size_hint=(1, 1))
        self.content_layout.add_widget(self.options_layout)

        # Pie de página verde con texto
        self.footer_layout = BoxLayout(size_hint=(1, 0.1), padding=(10, 10))
        with self.footer_layout.canvas.before:
            Color(0.0, 0.6, 0.0, 1)  # Verde fuerte
            self.footer_rect = Rectangle(size=self.footer_layout.size, pos=self.footer_layout.pos)
        self.footer_layout.bind(size=self._update_footer_rect, pos=self._update_footer_rect)

        footer_label = Label(
            text='Desarrollado por: [color=#00CC00]GEORT TEAM[/color]',
            markup=True,
            font_size='24sp',
            halign='center',
            valign='middle'
        )
        self.footer_layout.add_widget(footer_label)

        layout.add_widget(self.header_layout)
        layout.add_widget(self.content_layout)
        layout.add_widget(self.footer_layout)

        self.add_widget(layout)

    def _update_header_rect(self, instance, value):
        self.header_rect.pos = instance.pos
        self.header_rect.size = instance.size

    def _update_question_rect(self, instance, value):
        self.question_rect.pos = instance.pos
        self.question_rect.size = instance.size

    def _update_footer_rect(self, instance, value):
        self.footer_rect.pos = instance.pos
        self.footer_rect.size = instance.size

    def start_question_generation(self, tema):
        if self.is_generating:
            print("La generación de preguntas ya está en curso.")
            return
        self.is_generating = True
        self.tema = tema
        self.current_question_index = 0
        self.questions = []
        self.correct_answers = 0
        self.options_layout.clear_widgets()
        self.numero_pregunta.text = 'Generando preguntas...'
        self.question_label.text = ''
        # Iniciar la generación de preguntas en un hilo separado
        threading.Thread(target=self.generate_questions, args=(tema,), daemon=True).start()

    def generate_questions(self, tema):
        try:
            # Generar 6 preguntas usando la API de OpenAI
            for i in range(6):
                response = client.chat.completions.create(
                    model='gpt-3.5-turbo',
                    messages=[
                        {"role": "system", "content": "Eres un experto en historia de Colombia y ciencias sociales."},
                        {"role": "user", "content": f"Genera una pregunta de opción múltiple sobre {tema} con 3 opciones. Proporciona las opciones etiquetadas como A), B) y C). Indica también la respuesta correcta al final en el formato 'Respuesta correcta: A), B) o C)'."}
                    ],
                )

                choice = response.choices[0]
                content = choice.message.content
                print(f"Pregunta {i+1} Generada: {content}")  # Ver en consola

                if content:
                    # Extraer la pregunta, opciones y respuesta correcta
                    pattern = r'^(.*?)\nA\)(.*?)\nB\)(.*?)\nC\)(.*?)\nRespuesta correcta:\s*(A\)|B\)|C\))'
                    match = re.search(pattern, content)#, re.DOTALL)
                    if match:
                        question_text = match.group(1).strip()
                        option_a = f"A) {match.group(2).strip()}"
                        option_b = f"B) {match.group(3).strip()}"
                        option_c = f"C) {match.group(4).strip()}"
                        correct_answer = match.group(5).strip()
                        self.questions.append({
                            'question': question_text,
                            'options': [option_a, option_b, option_c],
                            'correct': correct_answer
                        })
                        print(f"Pregunta {i+1} Parseada Correctamente.")
                    else:
                        pass
                        #print("Error: Formato de pregunta no reconocido.")
                        #raise ValueError("Formato de pregunta no reconocido.")
                else:
                    print("Error: La respuesta de la API está vacía.")
                    raise ValueError("La respuesta de la API está vacía.")
        except Exception as e:
            print(f"Error al generar preguntas: {e}")
            print(traceback.format_exc())
            # Usar preguntas predeterminadas en caso de error
            self.questions = [
                {
                    'question': "¿Quién fue el libertador de Colombia?",
                    'options': ['A) Simón Bolívar', 'B) Francisco de Paula Santander', 'C) Cristóbal Colón'],
                    'correct': 'A)'
                },
                {
                    'question': "¿Cuál es la capital de Colombia?",
                    'options': ['A) Bogotá', 'B) Medellín', 'C) Cali'],
                    'correct': 'A)'
                },
                {
                    'question': "¿En qué año se declaró la independencia de Colombia?",
                    'options': ['A) 1810', 'B) 1819', 'C) 1821'],
                    'correct': 'B)'
                },
                {
                    'question': "¿Cuál fue la primera batalla importante de la independencia?",
                    'options': ['A) Batalla de Boyacá', 'B) Batalla de Carabobo', 'C) Batalla de Pichincha'],
                    'correct': 'A)'
                },
                {
                    'question': "¿Quién fue el presidente de la Gran Colombia durante la independencia?",
                    'options': ['A) Simón Bolívar', 'B) José María Córdova', 'C) Antonio Nariño'],
                    'correct': 'A)'
                },
                {
                    'question': "¿Cuál fue el primer documento oficial de independencia?",
                    'options': ['A) Acta de la Independencia', 'B) Constitución de Cúcuta', 'C) Tratado de Panamá'],
                    'correct': 'A)'
                },
            ]
        finally:
            print("Generación de preguntas completada.")
            self.is_generating = False
            Clock.schedule_once(self.display_question)

    def display_question(self, dt):
        if self.current_question_index < len(self.questions):
            q = self.questions[self.current_question_index]
            self.numero_pregunta.text = f"Pregunta {self.current_question_index + 1} de {len(self.questions)}"
            self.question_label.text = q['question']
            self.current_correct = q['correct']
            self.options_layout.clear_widgets()
            for option in q['options']:
                button = Button(
                    text=option,
                    font_size='22sp',
                    background_normal='',  # Sin imagen de fondo
                    background_color=(0.0, 0.8, 0.0, 1),  # Verde
                    color=(1, 1, 1, 1),  # Texto blanco
                    size_hint=(1, None),
                    height=50
                )
                button.bind(on_press=self.handle_option_selection)
                self.options_layout.add_widget(button)
            self.current_question_index += 1
        else:
            # Mostrar resultados
            self.manager.get_screen('result_screen').update_results(self.correct_answers)
            self.manager.current = 'result_screen'

    def handle_option_selection(self, instance):
        selected_option = instance.text[:2].strip()  # Extraer 'A)', 'B)' o 'C)'
        print(f"Opción seleccionada: {selected_option}")  # Ver en consola
        if selected_option == self.current_correct:
            self.correct_answers += 1
            print("Respuesta correcta.")
        else:
            print("Respuesta incorrecta.")
        # Pasar a la siguiente pregunta
        self.display_question(None)

# Pantalla de Resultados
class ResultScreen(Screen):
    def __init__(self, **kwargs):
        super(ResultScreen, self).__init__(**kwargs)
        self.correct_answers = 0
        self.build_ui()

    def build_ui(self):
        layout = BoxLayout(orientation='vertical', padding=20, spacing=10)

        # Encabezado blanco con texto
        header_layout = BoxLayout(size_hint=(1, 0.2))
        with header_layout.canvas.before:
            Color(1, 1, 1, 1.0)  # Blanco
            self.header_rect = Rectangle(size=header_layout.size, pos=header_layout.pos)
        header_layout.bind(size=self._update_header_rect, pos=self._update_header_rect)

        header_label = Label(
            text='[color=#00008B]GEORT[/color] [color=#00CC00]BETA[/color]',
            markup=True,
            font_size='32sp',
            bold=True,
            halign='center',
            valign='middle',
        )
        header_layout.add_widget(header_label)

        # Comentario para la imagen (si tienes la imagen, quita las #)
        # gear_image_header = Image(
        #     source='gear_darkblue.png',
        #     size_hint=(None, None),
        #     size=(30, 30),
        #     allow_stretch=True,
        # )
        # header_layout.add_widget(gear_image_header)

        # Mensaje de resultados
        message_label = Label(
            text='Resultados',
            font_size='36sp',
            bold=True,
            halign='center',
            valign='middle',
            color=(0, 0, 0, 1)  # Negro
        )
        message_label.bind(size=message_label.setter('text_size'))

        # Barras de resultados
        bar_layout = BoxLayout(orientation='vertical', padding=20, spacing=10)

        # Barra de respuestas correctas
        self.correct_bar = BoxLayout(size_hint=(1, None), height=50)
        with self.correct_bar.canvas.before:
            Color(0.0, 0.8, 0.0, 1)  # Verde
            self.correct_bar_rect = Rectangle(size=self.correct_bar.size, pos=self.correct_bar.pos)
        self.correct_bar.bind(size=self._update_bar_rect, pos=self._update_bar_rect)
        self.correct_label = Label(
            text=f'Respuestas Correctas: {self.correct_answers}/6',
            halign='left',
            valign='middle',
            color=(1, 1, 1, 1),
            font_size='20sp',
        )
        self.correct_label.bind(size=self.correct_label.setter('text_size'))
        self.correct_bar.add_widget(self.correct_label)

        # Barra de respuestas incorrectas
        self.incorrect_bar = BoxLayout(size_hint=(1, None), height=50)
        with self.incorrect_bar.canvas.before:
            Color(1, 0, 0, 1)  # Rojo
            self.incorrect_bar_rect = Rectangle(size=self.incorrect_bar.size, pos=self.incorrect_bar.pos)
        self.incorrect_bar.bind(size=self._update_bar_rect, pos=self._update_bar_rect)
        self.incorrect_label = Label(
            text=f'Respuestas Incorrectas: {6 - self.correct_answers}/6',
            halign='left',
            valign='middle',
            color=(1, 1, 1, 1),
            font_size='20sp',
        )
        self.incorrect_label.bind(size=self.incorrect_label.setter('text_size'))
        self.incorrect_bar.add_widget(self.incorrect_label)

        bar_layout.add_widget(self.correct_bar)
        bar_layout.add_widget(self.incorrect_bar)

        # Botón para volver a la pantalla principal
        back_button = Button(
            text='Volver a la Pantalla Principal',
            font_size='24sp',
            size_hint=(1, 0.1),
            background_normal='',  # Sin imagen de fondo
            background_color=(0.0, 0.8, 0.0, 1),  # Verde
            color=(1, 1, 1, 1),  # Texto blanco
            on_press=self.go_back
        )

        # Pie de página verde con texto
        footer_layout = BoxLayout(size_hint=(1, 0.1), padding=(10, 10))
        with footer_layout.canvas.before:
            Color(0.0, 0.6, 0.0, 1)  # Verde fuerte
            self.footer_rect = Rectangle(size=footer_layout.size, pos=footer_layout.pos)
        footer_layout.bind(size=self._update_footer_rect, pos=self._update_footer_rect)

        footer_label = Label(
            text='Desarrollado por: [color=#00CC00]GEORT TEAM[/color]',
            markup=True,
            font_size='24sp',
            halign='center',
            valign='middle'
        )
        footer_layout.add_widget(footer_label)

        layout.add_widget(header_layout)
        layout.add_widget(message_label)
        layout.add_widget(bar_layout)
        layout.add_widget(back_button)
        layout.add_widget(footer_layout)

        self.add_widget(layout)

    def _update_header_rect(self, instance, value):
        self.header_rect.pos = instance.pos
        self.header_rect.size = instance.size

    def _update_footer_rect(self, instance, value):
        self.footer_rect.pos = instance.pos
        self.footer_rect.size = instance.size

    def _update_bar_rect(self, instance, value):
        # Actualizar el tamaño y posición de las barras
        if instance == self.correct_bar_rect:
            self.correct_bar_rect.pos = instance.pos
            self.correct_bar_rect.size = instance.size
        elif instance == self.incorrect_bar_rect:
            self.incorrect_bar_rect.pos = instance.pos
            self.incorrect_bar_rect.size = instance.size

    def update_results(self, correct):
        self.correct_answers = correct
        incorrect_answers = 6 - self.correct_answers

        # Calcular las proporciones
        correct_proportion = self.correct_answers / 6
        incorrect_proportion = incorrect_answers / 6

        # Actualizar las barras
        self.correct_bar_rect.size = (self.width * correct_proportion, 50)
        self.incorrect_bar_rect.size = (self.width * incorrect_proportion, 50)

        # Actualizar las etiquetas
        self.correct_label.text = f'Respuestas Correctas: {self.correct_answers}/6'
        self.incorrect_label.text = f'Respuestas Incorrectas: {incorrect_answers}/6'

    def go_back(self, instance):
        # Volver a la pantalla de selección de temas
        self.manager.current = 'tema_screen'

# Aplicación Principal
class GeortApp(App):
    def build(self):
        # Fondo blanco
        Window.clearcolor = (1, 1, 1, 1)  # Blanco

        # Crear ScreenManager con transición
        self.screen_manager = ScreenManager(transition=FadeTransition())

        # Agregar pantallas
        self.screen_manager.add_widget(SplashScreen(name='splash_screen'))
        self.screen_manager.add_widget(TemaScreen(name='tema_screen'))
        self.screen_manager.add_widget(PreguntaScreen(name='pregunta_screen'))
        self.screen_manager.add_widget(ResultScreen(name='result_screen'))

        return self.screen_manager

    def on_start(self):
        # Iniciar en la pantalla de carga
        self.root.current = 'splash_screen'


GeortApp().run()

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
 
 



 
 
 
 

 
 
 
 

 
 

 
 
 
 
 

 
 
 
 
 
 

 
 
 
 
 
 
 

 
 
 
 
 
 
 

 
 
 

 
 

 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 

 
 
 
 
 
 
 
 
 

 

 
 
 
 

 

 
 
 
 

 
 
 

 
 

 
 
 
 

 
 
 
 
 

 
 
 
 




 
 
 

 
 
 
 

 
 
 

 
 

 
 
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 

 
 
 

 
 
 

 
 

 
 
 
 

 
 
 

 
 
 

 
 

 
 
 
 
 
 

 
 
 
 

 
 

 
 
 

 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 

 
 
 

 
 
 



 
 
 

 
 

 
 
 

 



 












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































    































































































































































































































































































































































































































































































































































































































































































































    



 








    





